server:
  port: 5555
spring:
  security:
    oauth2:
      client:
        registration:
          # 구글 설정
          google:
            client-id: 발급받은 ID
            client-secret: 발급받은 secret
            scope:
              - email
              - profile

          # 네이버 설정
          naver:
            client-id: 발급받은 ID
            client-secret: 발급받은 secret
            scope:
              - name
              - email
            client-name: Naver
            authorization-grant-type: authorization_code                  # oauth2의 동작 방식은 여러가지가 있는데, 코드를 응답받는 방식으로 진행한다는 의미
            redirect-uri: http://localhost:8080/login/oauth2/code/naver   # naver의 경우 redirect-uri를 설정해줘야함. (google, facebook의 경우 디폴트로 설정되어 있음)

          # 카카오 설정
          kakao:
            client-id: 자신의 REST API 키
            redirect-uri: http://localhost:5555/login/kakao   # naver의 경우 redirect-uri를 설정해줘야함. (google, facebook의 경우 디폴트로 설정되어 있음)
            client-authenticaion-method: POST
            authorization-grant-type: authorization_code                  # oauth2의 동작 방식은 여러가지가 있는데, 코드를 응답받는 방식으로 진행한다는 의미
            scope:
              - account_email
            client-name: Kakao

        # 네이버의 경우, 따로 provider 설정을 추가해줘야 한다.
        provider:
          # 아래의 링크들은 네이버 로그인 개발 가이드에 있다.
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response                               #회원정보를 json으로 받는데 response라는 키 값으로 네이버가 리턴해줄 것이다.
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id                               #회원정보를 json으로 받는데 response라는 키 값으로 네이버가 리턴해줄 것이다.
  devtools:
    livereload:
      enabled: true
    restart:
      enabled: true
    thymeleaf:
      cache: false
  datasource:
    #    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    ###    url: jdbc:p6spy:oracle:thin:@spring_medium?TNS_ADMIN=C:/wallet/Wallet_spring/
    #    url: jdbc:p6spy:oracle:thin:@spring2_medium?TNS_ADMIN=C:/wallet/Wallet_spring2/

    ###    url: jdbc:p6spy:oracle:thin:@spring2_medium?TNS_ADMIN=/Users/Wallet_spring2/
    #    username: admin
    #    password: OracleCloud1234
#    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
#    url: jdbc:p6spy:oracle:thin:@localhost:1521:XE
#    username: hr
#    password: hr

      url: jdbc:p6spy:oracle:thin:@spring2_medium?TNS_ADMIN=/Users/Wallet_spring2/
      username: admin
      password: OracleCloud1234
      driver-class-name: com.p6spy.engine.spy.P6SpyDriver
  #    url: jdbc:p6spy:oracle:thin:@localhost:1521:XE
  #    username: hr
  #    password: hr


  jpa:
    database-platform: org.hibernate.dialect.Oracle10gDialect
    hibernate:
#            ddl-auto: create
      #      ddl-auto: create-drop
#            ddl-auto: update
      ddl-auto: validate
    properties:
      hibernate:
        format_sql: true
  output:
    ansi:
      enabled: always

  #첨부파일 multipart 설정
  servlet:
    multipart:
      enabled: true
      max-request-size: 40MB
      max-file-size: 40MB
      file-size-threshold: 100MB
